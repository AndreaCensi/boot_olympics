from . import logger
from bootstrapping_olympics.loading.load_all import Configuration as  BOConf
from bootstrapping_olympics.ros_scripts.launch_xml import create_launch_xml
from vehicles.configuration.instance_all import dereference_vehicle_spec
from vehicles.configuration.load_all import Configuration
import os
import shutil
from pprint import pformat

def create_vehicles_launch(id_agent, id_vehicle, id_world, output_dir):
    logger.info('Creating launch for %s %s %s.' % (id_agent, id_vehicle, id_world))

    # We have to create a new 'robot'
    id_robot = 'sim-%s-%s' % (id_agent, id_vehicle)
    
    vehicle = dict(**Configuration.vehicles[id_vehicle])
    dereference_vehicle_spec(vehicle)
    world = Configuration.worlds[id_world]
    
    simulation_code = ['vehicles_ros.ROSVehicleSimulation',
                       {'vehicle': vehicle,
                        'world': world}]
    
    print('Simulation_code:\n%s' % pformat(simulation_code))
    
    robot = {
             'id': id_robot,
             'desc': 'Autogenerated',
             'ros-node': ['bootstrapping_adapter/robot_adapter.py',
                          {'code': simulation_code } ]
    }
    
    BOConf.robots[id_robot] = robot
    
    xml = create_launch_xml(id_agent, id_robot, namespace='boot_olympics', bag=None)
    
    basename = '%s.launch' % id_robot
    output = os.path.join(output_dir, 'boot_gui_gen/vsim/%s' % basename)
    logger.info('Writing to file %r.' % output)
    dirname = os.path.dirname(output)
    if not os.path.exists(dirname):
        os.makedirs(dirname)
        
    with open(output, 'w') as f:
        f.write(xml)
    
    
    logger.info('Created launch file in %r.' % basename)

    other = 'last.launch'
    output2 = os.path.join(output_dir, other)
    shutil.copyfile(output, output2)
    logger.info(' (also available as %r)' % other)
